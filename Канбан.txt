#include <iostream>
#include <ctime>
#include <vector>
using namespace std;

//статус задачи перечисление
enum  Status {
    Pending=0,
    inDesigning = 1,
    inDeveloping = 2,
    inTesting = 3,
    isReady = 4
};
//должность перечисление
enum class Position{
    Designer = 1,
    Developer = 2,
    Tester = 3
};
//структура работник
struct Worker{
    int id;
    string name;
    Position pos;
    bool isFree;
};
//структура задачи
struct Task{
    int id;
    string name;
    tm dateTime;
    Worker worker;
    Status status;
};
//функция преобразования номера должности в строку
string convPos(int num){
  switch (num) {
    case 1:
      return "Designer";
    case 2:
      return  "Developer";
    case 3:
      return  "Tester";
    default:
      return  "";
    }
}
//функция вывода всех должностей
void posOut(){
  cout<<endl;
  for(auto i = 1; i < 4; ++i){
      cout<<i<<": "<<convPos (i)<<endl;
    }
  cout<<endl;
}


//функция преобразования номера статуса в строку
string convStatus(Status st){
    switch (st) {
    case 0:
        return "Pending";
    case 1:
        return "in designing";
    case 2:
        return  "in developing";
    case 3:
        return  "in testing";
    case 4:
        return  "is ready";
    default:
        return "";
    }
}
//функция вывода статусов
void statusOutput(){
    cout<<endl;
    for(auto i = 0; i < 5; ++i){
        cout<<i<<": "<<convStatus(static_cast<Status>(i))<<endl;

    }
    cout<<endl;
}
//функция добавления новой задачи
void addTask(vector<Task>& tasks, const Task& task ){
    if(tasks.size()<=4){
        tasks.emplace_back(task);
    }else{
        cout<<"limit is exceeded"<<endl;//лимит превышен
    }
}
//функция изменения статуса
int changeStatus(vector<Task>& tasks, size_t taskId, Status newStatus){
    if(taskId > tasks.size()){
        cout<<"index is incorrect!"<<endl;
        return -1;
    }else{
        if(abs(tasks[taskId].status - newStatus) != 1){
            cout<<"stage error";
            return  -1;
        }else{
            tasks[taskId].status = newStatus;
//            tasks[taskId].worker.isFree = true;
            return  1;
        }
    }
}
//вывод всех задач
void printAllTasks(vector<Task> const &tasks){
    cout<<"ID\t\tTask Name\tDate\t\t\tWorker\t\tStatus\n";
    for(const auto& task: tasks){
        cout<<task.id<<"\t\t"<<task.name<<"\t\t"
           <<task.dateTime.tm_mday<<"."
          <<task.dateTime.tm_mon+1<<"."
         <<task.dateTime.tm_year+1900<<"\t\t"
        <<task.worker.name<<"\t\t"<<convStatus(task.status)<<endl;
    }
}

//вывод всех работников на экран
void printAllWorkers(vector<Worker>const & workers){
  cout<<"ID\t\tNAME\t\tPosition\t\tis Free\n";
  for(const  auto &worker: workers){
      cout<<worker.id<<"\t\t"<<worker.name<<"\t\t"<<convPos(static_cast<int>(worker.pos))<<"\t\t"<<boolalpha <<worker.isFree<<endl;
    }
}
//функция вывода подходящих работников
void printCompetWorker(vector<Worker>const & workers, int posNum ){
  cout<<"ID\t\tNAME\t\tPosition\t\tis Free\n";
  for(const auto &worker: workers){
      if(worker.pos == static_cast<Position>(posNum) && worker.isFree){
         cout<<worker.id<<"\t\t"<<worker.name<<"\t\t"<<convPos(static_cast<int>(worker.pos))<<"\t\t"<<boolalpha <<worker.isFree<<endl;
        }
    }
}

Worker getWorker(vector<Worker>& workers, int workerNum){
  workers[static_cast<size_t>(workerNum)].isFree = false;
  return  workers[static_cast<size_t>(workerNum)];
}
//    // current date/time based on current system
//      time_t now = time(nullptr);
//      tm *gmtm = gmtime(&now);
int main()
{
    int inCin;
    bool isExit = false;
    vector<Task> tasks;
    vector<Worker> workers;
    int taskId = 0;
    int workerId = 0;
    while (!isExit) {
        cout<<"\n1 - add Task\n2 - add worker \n3 - change status \n4 - print all tasks \n5 - print all Workers \n0 - exit\n\n";
        cin>>inCin;
        switch (inCin) {
          case 1:{
              Task myTask;
              myTask.id = taskId;
              taskId++;
              cout<<"enter task name: "<<endl;
              cin>>myTask.name;
              myTask.status = Status::Pending;
              time_t now = time(nullptr);
              myTask.dateTime = *gmtime(&now);
              addTask(tasks,myTask);
              break;
            }
          case 2:
            {
              Worker myWorker;
              myWorker.id = workerId;
              workerId++;
              cout<<"enter worker name: \n";
              cin>>myWorker.name;
              posOut ();
              int pos;
              cout<<"enter worker position: \n";
              cin>>pos;
              myWorker.pos = static_cast<Position>(pos);
              myWorker.isFree = true;
              workers.emplace_back(myWorker);
              break;
            }
          case 3:
            {
              printAllTasks(tasks);
              size_t taskNum;
              cout<<"enter task num: \n";
              cin>>taskNum;
              statusOutput();
              int statNum;
              cout<<"enter status number: \n";
              cin>>statNum;
              int err;

              err = changeStatus(tasks,taskNum, static_cast<Status>(statNum));
              if(err == 1){
                  if(tasks[taskNum].worker.id > -1 && tasks[taskNum].worker.id < 15){
                    int currWorkerId = tasks[taskNum].worker.id;
                    workers[currWorkerId].isFree = true;
                    }
                  if(statNum != 4){
                      printCompetWorker (workers, tasks[taskNum].status);
                      cout<<"\nenter worker num:\n";
                      int workerNum;
                      cin>>workerNum;
                      tasks[taskNum].worker = getWorker (workers, workerNum);
                    }
//                  cout<<workers[currWorkerId].id<<endl;
                  time_t now = time(nullptr);
                  tasks[taskNum].dateTime = *gmtime(&now);
//                  cout<<"Continue? y/n\n";
//                  string temp;
//                  cin>>temp;
//                  if(temp=="n" || temp == "no" || temp == "т"){
//                      isExit = true;
//                    }
                  break;
                }
            }
          case 4:
            printAllTasks(tasks);
            break;
          case 5:
            printAllWorkers (workers);
            break;
          case 0:
            isExit = true;
            break;
          default:
            break;
        }
    }


    return 0;
}
